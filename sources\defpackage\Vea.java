package defpackage;

@Deprecated
/* renamed from: Vea reason: default package */
/* compiled from: DatabaseSchema */
final class Vea {
    static final String a;
    static final String b;
    static final String c;

    static {
        StringBuilder sb = new StringBuilder();
        sb.append("AS SELECT ");
        sb.append(e.d.e());
        String str = " as ";
        sb.append(str);
        String str2 = "_id";
        sb.append(str2);
        String str3 = ",";
        sb.append(str3);
        sb.append(e.e.e());
        sb.append(str);
        String str4 = "_type";
        sb.append(str4);
        sb.append(str3);
        sb.append(e.g.e());
        sb.append(str);
        sb.append(k.a);
        sb.append(str3);
        sb.append(e.h.e());
        sb.append(str);
        sb.append(k.b);
        sb.append(str3);
        sb.append(e.f.e());
        sb.append(str);
        sb.append(k.c);
        sb.append(str3);
        sb.append(e.k.e());
        sb.append(str);
        sb.append(k.d);
        sb.append(str3);
        sb.append(e.m.e());
        sb.append(str);
        sb.append(k.e);
        sb.append(str3);
        sb.append(e.l.e());
        sb.append(str);
        sb.append(k.f);
        sb.append(str3);
        sb.append(e.i.e());
        sb.append(str);
        sb.append(k.g);
        sb.append(str3);
        sb.append(e.I.e());
        sb.append(str);
        sb.append(k.h);
        sb.append(str3);
        sb.append(e.j.e());
        sb.append(str);
        sb.append(k.i);
        sb.append(str3);
        sb.append(e.n.e());
        sb.append(str);
        sb.append(k.j);
        sb.append(str3);
        sb.append(e.o.e());
        sb.append(str);
        sb.append(k.k);
        sb.append(str3);
        sb.append(e.p.e());
        sb.append(str);
        sb.append(k.l);
        sb.append(str3);
        sb.append(e.q.e());
        sb.append(str);
        sb.append(k.m);
        sb.append(str3);
        sb.append(e.r.e());
        sb.append(str);
        sb.append(k.n);
        sb.append(str3);
        sb.append(e.s.e());
        sb.append(str);
        sb.append(k.o);
        sb.append(str3);
        sb.append(e.t.e());
        sb.append(str);
        sb.append(k.p);
        sb.append(str3);
        sb.append(e.u.e());
        sb.append(str);
        sb.append(k.q);
        sb.append(str3);
        sb.append(e.v.e());
        sb.append(str);
        sb.append(k.r);
        sb.append(str3);
        sb.append(e.w.e());
        sb.append(str);
        sb.append(k.s);
        sb.append(str3);
        sb.append(e.x.e());
        sb.append(str);
        sb.append(k.t);
        sb.append(str3);
        sb.append(e.y.e());
        sb.append(str);
        sb.append(k.u);
        sb.append(str3);
        sb.append(e.z.e());
        sb.append(str);
        sb.append(k.v);
        sb.append(str3);
        sb.append(e.A.e());
        sb.append(str);
        sb.append(k.w);
        sb.append(str3);
        sb.append(e.B.e());
        sb.append(str);
        sb.append(k.x);
        sb.append(str3);
        sb.append(e.C.e());
        sb.append(str);
        sb.append(k.y);
        sb.append(str3);
        sb.append(e.D.e());
        sb.append(str);
        sb.append(k.z);
        sb.append(str3);
        sb.append(e.E.e());
        sb.append(str);
        sb.append(k.A);
        sb.append(str3);
        sb.append(e.F.e());
        sb.append(str);
        sb.append(k.B);
        sb.append(str3);
        sb.append(e.G.e());
        sb.append(str);
        sb.append(k.C);
        sb.append(str3);
        sb.append(e.J.e());
        sb.append(str);
        sb.append(k.D);
        sb.append(str3);
        sb.append(e.K.e());
        sb.append(str);
        sb.append(k.E);
        sb.append(str3);
        sb.append(e.N.e());
        sb.append(str);
        sb.append(k.F);
        sb.append(str3);
        sb.append(e.O.e());
        sb.append(str);
        sb.append(k.G);
        sb.append(str3);
        sb.append(e.P.e());
        sb.append(str);
        sb.append(k.H);
        sb.append(str3);
        sb.append(e.Q.e());
        sb.append(str);
        sb.append(k.I);
        sb.append(str3);
        sb.append(e.R.e());
        sb.append(str);
        sb.append("display_stats_enabled");
        sb.append(str3);
        sb.append(e.S.e());
        sb.append(str);
        sb.append("secret_token");
        sb.append(str3);
        sb.append(f.e.e());
        sb.append(str);
        sb.append("sound_policies_monetizable");
        sb.append(str3);
        sb.append(f.f.e());
        sb.append(str);
        sb.append("sound_policies_blocked");
        sb.append(str3);
        sb.append(f.l.e());
        sb.append(str);
        String str5 = "sound_policies_syncable";
        sb.append(str5);
        sb.append(str3);
        sb.append(f.g.e());
        sb.append(str);
        sb.append("sound_policies_snipped");
        sb.append(str3);
        sb.append(f.j.e());
        sb.append(str);
        sb.append("sound_policies_policy");
        sb.append(str3);
        sb.append(f.m.e());
        sb.append(str);
        sb.append("sound_policies_policy_last_updated_at");
        sb.append(str3);
        sb.append(f.l.e());
        sb.append(str);
        sb.append(str5);
        sb.append(str3);
        sb.append(f.h.e());
        sb.append(str);
        sb.append("sound_policies_sub_mid_tier");
        sb.append(str3);
        sb.append(f.i.e());
        sb.append(str);
        sb.append("sound_policies_sub_high_tier");
        sb.append(str3);
        sb.append(f.k.e());
        sb.append(str);
        sb.append("sound_policies_monetization_model");
        sb.append(str3);
        sb.append(h.d);
        sb.append(str);
        sb.append("sound_user_id");
        sb.append(str3);
        sb.append(h.f);
        sb.append(str);
        sb.append("sound_user_username");
        sb.append(str3);
        sb.append(h.e);
        sb.append(str);
        sb.append("sound_user_permalink");
        sb.append(str3);
        sb.append(h.g);
        sb.append(str);
        sb.append("sound_user_avatar_url");
        sb.append(" FROM Sounds LEFT JOIN Users ON( ");
        sb.append(e.H.e());
        String str6 = " = ";
        sb.append(str6);
        sb.append(h.d);
        sb.append(") LEFT OUTER JOIN TrackPolicies ON(   ");
        sb.append(e.d.e());
        sb.append(str6);
        sb.append(f.d.e());
        sb.append(") WHERE ");
        sb.append(e.L.e());
        sb.append(" IS NULL AND (");
        sb.append(e.e.e());
        sb.append(" != ");
        sb.append(0);
        sb.append(" OR ");
        sb.append(f.d.e());
        sb.append(" IS NOT NULL)");
        a = sb.toString();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("AS SELECT SoundStream._id as _id,SoundStream.created_at as created_at,SoundStream.sound_id as sound_id,SoundStream.sound_type as sound_type,SoundStream.reposter_id as reposter_id,SoundStream.promoted_id as promoted_id,");
        sb2.append(h.f);
        sb2.append(str);
        sb2.append("reposter_username");
        sb2.append(str3);
        sb2.append(h.e);
        sb2.append(str);
        sb2.append("reposter_permalink");
        sb2.append(str3);
        sb2.append(h.g);
        sb2.append(str);
        sb2.append("reposter_avatar_url");
        sb2.append(",SoundView.");
        sb2.append(k.m);
        sb2.append(str);
        sb2.append("sound_permalink_url");
        sb2.append(",SoundView.* FROM SoundStream INNER JOIN ( SELECT _id, MAX(created_at) FROM SoundStream GROUP BY sound_id, sound_type, promoted_id ) dupes ON SoundStream._id = dupes._id  LEFT JOIN Users ON(   SoundStream.");
        sb2.append("reposter_id");
        sb2.append(str6);
        sb2.append(h.d);
        sb2.append(") INNER JOIN SoundView ON(   SoundStream.");
        String str7 = "sound_id";
        sb2.append(str7);
        String str8 = " = SoundView.";
        sb2.append(str8);
        sb2.append(str2);
        sb2.append(" AND    SoundStream.");
        String str9 = "sound_type";
        sb2.append(str9);
        sb2.append(str8);
        sb2.append(str4);
        sb2.append(") ORDER BY SoundStream.");
        String str10 = "created_at";
        sb2.append(str10);
        String str11 = " DESC";
        sb2.append(str11);
        b = sb2.toString();
        StringBuilder sb3 = new StringBuilder();
        sb3.append("AS SELECT Activities._id as _id,Activities.uuid as uuid,Activities.type as type,Activities.tags as tags,Activities.created_at as created_at,Activities.comment_id as comment_id,Activities.sound_id as sound_id,Activities.sound_type as sound_type,Activities.user_id as user_id,Activities.content_id as content_id,Activities.sharing_note_text as sharing_note_text,Activities.sharing_note_created_at as sharing_note_created_at,");
        sb3.append(h.f);
        sb3.append(str);
        sb3.append("activity_user_username");
        sb3.append(str3);
        sb3.append(h.e);
        sb3.append(str);
        sb3.append("activity_user_permalink");
        sb3.append(str3);
        sb3.append(h.g);
        sb3.append(str);
        sb3.append("activity_user_avatar_url");
        sb3.append(str3);
        sb3.append(h.s);
        sb3.append(str);
        sb3.append("activity_user_is_pro");
        sb3.append(",SoundView.*,Comments.");
        sb3.append("body");
        sb3.append(str);
        sb3.append("comment_body");
        String str12 = ",Comments.";
        sb3.append(str12);
        sb3.append(str10);
        sb3.append(str);
        sb3.append("comment_created_at");
        sb3.append(str12);
        sb3.append("timestamp");
        sb3.append(str);
        sb3.append("comment_timestamp");
        sb3.append(" FROM Activities LEFT JOIN Users ON(   Activities.");
        sb3.append("user_id");
        sb3.append(str6);
        sb3.append(h.d);
        sb3.append(") LEFT JOIN SoundView ON(   Activities.");
        sb3.append(str7);
        sb3.append(str8);
        sb3.append(str2);
        sb3.append(" AND    Activities.");
        sb3.append(str9);
        sb3.append(str8);
        sb3.append(str4);
        sb3.append(") LEFT JOIN Comments ON(   Activities.");
        sb3.append("comment_id");
        sb3.append(" = Comments.");
        sb3.append(str2);
        sb3.append(") LEFT JOIN Activities track_dup ON(   track_dup.sound_id = Activities.sound_id AND    track_dup.type = 'track-sharing' AND Activities.type = 'track') LEFT JOIN Activities set_dup ON(   set_dup.sound_id = Activities.sound_id AND    set_dup.type = 'playlist-sharing' AND Activities.type = 'playlist') WHERE track_dup._id IS NULL AND set_dup._id IS NULL AND (Activities.");
        sb3.append(C1325gg.TYPE);
        sb3.append(" == 'user_follow' OR SoundView.");
        sb3.append(str2);
        sb3.append(" IS NOT NULL) ORDER BY ");
        sb3.append(str10);
        sb3.append(str11);
        c = sb3.toString();
    }

    Vea() {
    }
}
